import requests
import json

def convertDate(dateToConvert,start=True): #allows user to enter date in mm/dd/yyyy format
    temp = dateToConvert.split('/')
    if start:
        return temp[2] + '-' + temp[0] + '-' + temp[1] + 'T00:00:00-05:00'
    else:
        return temp[2] + '-' + temp[0] + '-' + temp[1] + 'T23:59:59-05:00'

class SearchService(object):

    def __init__(self,session): #allow for manual JWT input if we want to have JWTs generated by admin console in the future
        super(SearchService, self).__init__()
        self._session = session
        self.urlSearch = '/api/v1/search' #url extension for search
        self.urlSummary = '/api/v1/summary'
   
    def getPreviousSearches(self):
        metadata = {                   #MUST INCLUDE tags & operation METADATA FIELDS FOR LOG TRACKING
            'tags' : ['Search'],
            'operation' : 'getPreviousSearches'
        }
        return self._session.get(metadata, self.urlSearch)
   
    def newSearch(self,filter,queryTerm,queryType,startDate,endDate,booleanTerms={},docIDS=[]):
        startDate = convertDate(startDate)
        endDate = convertDate(endDate,False)

        if filter == {}:
            dataType = 'both'
        else:
            try:
                dataType = filter['data_source_name']['values'][0]
            except Exception as e:
                dataType = 'both'

        metadata = {                   #MUST INCLUDE tags & operation METADATA FIELDS FOR LOG TRACKING
            'tags' : ['Search',f'{queryType}',f'{dataType}'],
            'operation' : 'newSearch'
        }

        payload = {
            'query': queryTerm,
            'filter': filter,
            'start_date': startDate, #dates entered as mm/dd/yyyy
            'end_date': endDate,
            'query_type': queryType,
            'boolean_terms': booleanTerms,
            'document_ids': docIDS
        }

        return self._session.post(metadata,self.urlSearch,json=payload)

    def getSearchResults(self,searchID,order_by='relevance',numResults=500): #ERRORS IF YOU TRY TO RETRIEVE 6000 docs or more
        url = self.urlSearch + '/{}/results?order=desc&order_by={}&page=0&page_size={}'.format(searchID,order_by,numResults)
        metadata = {                   #MUST INCLUDE tags & operation METADATA FIELDS FOR LOG TRACKING
            'tags' : ['Search','Search Results'],
            'operation' : 'getSearchResults'
        }
        return self._session.get(metadata, url)

    def newSearchWithDocResults(self,filter,queryTerm,queryType,startDate,endDate,booleanTerms={},docIDS=[],order_by='relevance',numResults=500):
        searchObj = self.newSearch(filter,queryTerm,queryType,startDate,endDate,booleanTerms,docIDS)
        return self.getSearchResults(searchObj['id'],order_by,numResults)
    
    def createSummary(self, searchID, validate = True): #requires searchID, set validate to False to disable RAG-V
        metadata = {                   #MUST INCLUDE tags & operation METADATA FIELDS FOR LOG TRACKING
            'tags' : ['Summary','Create Summary'],
            'operation' : 'createSummary'
        }
        payload = {
            'search_id': searchID,
            'validate': validate
        }

        return self._session.post(metadata,self.urlSummary,json=payload) #returns 202 Accepted to indicate summary job started
    
    def getSummary(self, summaryID): #will use summary ID returned from createSummary fn
        metadata = {                   #MUST INCLUDE tags & operation METADATA FIELDS FOR LOG TRACKING
            'tags' : ['Summary','Get Summary'],
            'operation' : 'getSummary'
        }
        url = self.urlSummary + '/' + summaryID

        return self._session.get(metadata, url) #rest_session defaults to 10x retries for RAG-V summaries
    
    def generateSummary(self,searchID, validate=True):
        summaryData = self.createSummary(searchID)
        return self.getSummary(summaryData['id'])